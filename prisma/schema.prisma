// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  projects      Project[]
  projectUsers  ProjectUser[]
  comments      Comment[]
  tracks        Track[]
  reaction      Reaction[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ProjectUser {
  id        String @id @default(cuid())
  userId    String
  projectId String
  role      String

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  urlName     String
  description String?
  coverImage  String?
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tracks   Track[]
  users    ProjectUser[]
  comments Comment[]

  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  @@index([name])
}

model Track {
  id          String   @id @default(cuid())
  name        String
  urlName     String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  createdBy   User    @relation(fields: [createdById], references: [id])
  createdById String
  project     Project @relation(fields: [projectId], references: [id])
  projectId   String

  @@index([name])
}

model Reaction {
  id        String   @id @default(cuid())
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relation
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  // Comment relation
  comment   Comment @relation(fields: [commentId], references: [id])
  commentId String

  @@index([createdById])
}

model Comment {
  id        String   @id @default(cuid())
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relation
  createdBy   User   @relation(fields: [createdById], references: [id])
  createdById String

  // Project relation
  project   Project @relation(fields: [projectId], references: [id])
  projectId String

  // Self-relation to implement replies
  parentId String?    @map("parent_id")
  parent   Comment?   @relation("CommentToComment", fields: [parentId], references: [id], onDelete: Cascade)
  replies  Comment[]  @relation("CommentToComment")
  reactions Reaction[]

  @@index([createdById])
}
